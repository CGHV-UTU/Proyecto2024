CREATE DATABASE IF NOT EXISTS infini;
use infini; 

CREATE TABLE IF NOT EXISTS Usuarios (
    nombreDeCuenta varchar(20) NOT NULL,
    nombreVisible varchar(20) NOT NULL,
    email varchar(50) NOT NULL,
    descripcion varchar(100),
    foto VARCHAR(150) NOT NULL,
    configuraciones varchar(200) NOT NULL,
    genero varchar(20) NOT NULL,
    fechaDeNacimiento DATE NOT NULL,
    estadoDeCuenta ENUM('publica', 'privada') NOT NULL DEFAULT 'publica',
    PRIMARY KEY (nombreDeCuenta),
    CHECK (email LIKE '%@%'),
    CHECK (fechaDeNacimiento < '2024-08-30')
    );

CREATE TABLE IF NOT EXISTS Grupos (
    nombreReal VARCHAR(20) NOT NULL,
    nombreVisible VARCHAR(20) NOT NULL,
    configuracion TinyText,
    descripcion VARCHAR(100),
    foto VARCHAR(100),
    PRIMARY KEY (nombreReal)
);

CREATE TABLE IF NOT EXISTS Eventos (
    idEvento INT NOT NULL AUTO_INCREMENT,
    titulo VARCHAR(20) NOT NULL,
    ubicacion VARCHAR(50),
    fechaYhora_Inicio DATETIME NOT NULL,
    fechaYhora_Final DATETIME NOT NULL,
    foto VARCHAR(100),
    descripcion VARCHAR(100),
    PRIMARY KEY (idEvento)
);

CREATE TABLE IF NOT EXISTS Posts (
    idPost INT NOT NULL AUTO_INCREMENT,
    nombreDeCuenta varchar(20) NOT NULL,
    texto VARCHAR(100),    
    video VARCHAR(50),
    imagen VARCHAR(100),
    categoria VARCHAR(100) NOT NULL,
    fechaYhora DATETIME,
    comentarios BOOL NOT NULL DEFAULT TRUE,
    PRIMARY KEY (idPost, nombreDeCuenta),
    FOREIGN KEY (nombreDeCuenta) REFERENCES Usuarios(nombreDeCuenta),
    CHECK (
    (texto IS NOT NULL OR video IS NOT NULL OR imagen IS NOT NULL) -- Al menos uno debe tener un valor
    AND NOT (video IS NOT NULL AND imagen IS NOT NULL))-- No se permite video e imagen juntos 
);

CREATE TABLE IF NOT EXISTS PostPublico (
    idPost INT NOT NULL,
    nombreDeCuenta varchar(20) NOT NULL,
    PRIMARY KEY (idPost, nombreDeCuenta),
    FOREIGN KEY (nombreDeCuenta,idPost) REFERENCES Posts(nombreDeCuenta,idPost)
);

CREATE TABLE IF NOT EXISTS PostGrupo (
    idPost INT NOT NULL,
    nombreDeCuenta VARCHAR(20) NOT NULL,
    nombreReal VARCHAR(20) NOT NULL,
    PRIMARY KEY (idPost, nombreDeCuenta, nombreReal),
    FOREIGN KEY (nombreDeCuenta) REFERENCES Posts(nombreDeCuenta),
    FOREIGN KEY (idPost) REFERENCES Posts(idPost),
    FOREIGN KEY (nombreReal) REFERENCES Grupos(nombreReal)
);

CREATE TABLE IF NOT EXISTS PostEvento(
    idPost INT NOT NULL,
    nombreDeCuenta VARCHAR(20) NOT NULL,
    idEvento INT NOT NULL,
    PRIMARY KEY (idPost, nombreDeCuenta, idEvento),
    FOREIGN KEY (nombreDeCuenta) REFERENCES Posts(nombreDeCuenta),
    FOREIGN KEY (idPost) REFERENCES Posts(idPost),
    FOREIGN KEY (idEvento) REFERENCES Eventos(idEvento)
);

CREATE TABLE IF NOT EXISTS Comentarios (
    id int NOT NULL AUTO_INCREMENT,
    nombreDeCuenta varchar(20) NOT NULL,
    idPost int NOT NULL,
    nombreCreador VARCHAR(20) NOT NULL,
    texto varchar(100) NOT NULL,
    fechaYhora DATETIME NOT NULL,    
    PRIMARY KEY (id, nombreDeCuenta),
    FOREIGN KEY (idPost,nombreCreador) REFERENCES Posts(idPost,nombreDeCuenta),
    FOREIGN KEY (nombreDeCuenta) REFERENCES Usuarios(nombreDeCuenta)
);

CREATE TABLE IF NOT EXISTS Ban (
    idBan INT NOT NULL AUTO_INCREMENT,
    nombreDeUsuario VARCHAR(20) NOT NULL,
    fechaInicio DATETIME NOT NULL,
    fechaFinalizacion DATETIME,
    PRIMARY KEY (idBan, nombreDeUsuario),
    FOREIGN KEY (nombreDeUsuario) REFERENCES Usuarios(nombreDeCuenta),
    CHECK (fechaFinalizacion > fechaInicio)
);

CREATE TABLE IF NOT EXISTS Reportes (
    numeroDeReporte INT NOT NULL AUTO_INCREMENT,
    nombreDeCuenta VARCHAR(20) NOT NULL,
    cuentaReporteUsuario VARCHAR(20),
    idPost INT,
    creadorDelPost VARCHAR(20),
    idComentario INT,
    creadorDelComentario VARCHAR(20),
    nombreGrupo VARCHAR(20),
    idEvento INT,
    tipo ENUM('Sexual', 'Violento o repugnante', 'Vejatorio', 'Hostigamiento o acoso', 'Actividades dañinas o peligrosas',
    'Desinformacion', 'Maltrato infantil', 'Terrorismo', 'Fraude', 'Problema legal', 'Otros') NOT NULL DEFAULT 'Terrorismo',
    descripcion TINYTEXT,
    PRIMARY KEY(numeroDeReporte, nombreDeCuenta),
    FOREIGN KEY (nombreDeCuenta) REFERENCES Usuarios(nombreDeCuenta),
    FOREIGN KEY (cuentaReporteUsuario ) REFERENCES Usuarios(nombreDeCuenta),
    FOREIGN KEY (idPost, creadorDelPost) REFERENCES Posts(idPost, nombreDeCuenta),
    FOREIGN KEY (idComentario, creadorDelComentario) REFERENCES Comentarios(id, nombreDeCuenta),
    FOREIGN KEY (nombreGrupo) REFERENCES Grupos(nombreReal),
    FOREIGN KEY (idEvento) REFERENCES Eventos(idEvento),
    CHECK ( 
		(cuentaReporteUsuario IS NOT NULL) + 
		(idPost IS NOT NULL AND creadorDelPost IS NOT NULL) + 
		(idComentario IS NOT NULL AND creadorDelComentario IS NOT NULL) + 
		(nombreGrupo IS NOT NULL) + 
		(idEvento IS NOT NULL) = 1 
		),
         CHECK (
        (cuentaReporteUsuario IS NULL OR cuentaReporteUsuario != nombreDeCuenta)
		)
);

CREATE TABLE IF NOT EXISTS Login (
    nombreDeCuenta VARCHAR(20) NOT NULL,
    contrasena VARCHAR(50) NOT NULL,
    PRIMARY KEY (nombreDeCuenta, contrasena)
);

CREATE TABLE IF NOT EXISTS Notificaciones(
	idNotificacion INT NOT NULL,
    tipo ENUM('recibeLike', 'etiquetado', 'nuevoMensaje', 'comentario', 'solicitud', 'video', 'configuracion', 'extras', 'baneo') NOT NULL,
    texto TINYTEXT NOT NULL,
    fechaYHora DATETIME NOT NULL,
    imagen VARCHAR(100) NOT NULL,
    nombreDeCuenta VARCHAR(20) NOT NULL,
    PRIMARY KEY (idNotificacion),
    FOREIGN KEY (nombreDeCuenta) REFERENCES Usuarios(nombreDeCuenta)
);

CREATE TABLE IF NOT EXISTS Mensajes(
    idMensaje INT AUTO_INCREMENT NOT NULL,
    nombreDeCuenta VARCHAR(20) NOT NULL,
    nombreReal VARCHAR(20) NOT NULL,
    texto TINYTEXT NOT NULL,
    fechaYHora DATETIME NOT NULL,
    video TINYTEXT,
    imagen TINYTEXT,
    PRIMARY KEY (idMensaje),
    FOREIGN KEY (nombreDeCuenta) REFERENCES Usuarios(nombreDeCuenta),
    FOREIGN KEY (nombreReal) REFERENCES Grupos(nombreReal)
);

-- Usuario - Usuario
CREATE TABLE IF NOT EXISTS Interactua(
    nombreDeCuenta VARCHAR(20)  NOT NULL,
    nombreDeCuenta2 VARCHAR(20) NOT NULL,
    tipoInteraccion ENUM('seguir', 'bloquear') NOT NULL DEFAULT 'seguir',
    PRIMARY KEY (nombreDeCuenta, nombreDeCuenta2),
    FOREIGN KEY (nombreDeCuenta) REFERENCES Usuarios(nombreDeCuenta),
    FOREIGN KEY (nombreDeCuenta2) REFERENCES Usuarios(nombreDeCuenta)    
);

-- Usuario - Grupo
CREATE TABLE IF NOT EXISTS Participa(
    nombreDeCuenta VARCHAR(20) NOT NULL,
    nombreReal VARCHAR(20) NOT NULL,
    rol ENUM('usuario', 'admin', 'creador') DEFAULT 'usuario',
   PRIMARY KEY (nombreDeCuenta, nombreReal),
   FOREIGN KEY (nombreDeCuenta) REFERENCES Usuarios(nombreDeCuenta),
   FOREIGN KEY (nombreReal) REFERENCES Grupos(nombreReal)
);

DELIMITER //

CREATE TRIGGER validar_rol_participa
BEFORE INSERT ON Participa
FOR EACH ROW
BEGIN
    DECLARE total_usuarios INT;

    -- Contar cuántos usuarios ya están en el grupo
    SELECT COUNT(*) INTO total_usuarios
    FROM Participa
    WHERE nombreReal = NEW.nombreReal;

    -- Si ya hay más de 2 usuarios en el grupo, el rol no puede ser NULL
    IF total_usuarios > 1 AND NEW.rol IS NULL THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El rol no puede ser nulo si hay más de 2 usuarios en el grupo.';
    END IF;

    -- Si hay 2 o menos usuarios, el rol debe ser NULL
    IF total_usuarios <= 1 THEN
        SET NEW.rol = NULL;
    END IF;
END //

DELIMITER ;


-- Usuario - Evento
CREATE TABLE IF NOT EXISTS ParticipaEvento(
 nombreDeCuenta VARCHAR(20) NOT NULL,
 idEvento INT NOT NULL, 
 rol ENUM('usuario', 'admin', 'creador') DEFAULT 'usuario',
PRIMARY KEY (nombreDeCuenta, idEvento),
FOREIGN KEY (nombreDeCuenta) REFERENCES Usuarios(nombreDeCuenta),
FOREIGN KEY (idEvento) REFERENCES Eventos(idEvento)
);

CREATE TABLE IF NOT EXISTS DaLike(
    nombreDeCuenta VARCHAR(20) NOT NULL,
    idPost INT NOT NULL, 
    nombredeCreador VARCHAR(20) NOT NULL,
    PRIMARY KEY (nombreDeCuenta, idPost, nombredeCreador),
    FOREIGN KEY (nombreDeCuenta) REFERENCES Usuarios(nombreDeCuenta),
    FOREIGN KEY (nombredeCreador,idPost) REFERENCES PostPublico(nombreDeCuenta,idPost)
);

CREATE TABLE IF NOT EXISTS DaLikeComentario(
    nombreDeCuenta VARCHAR(20) NOT NULL,
    idComentario INT NOT NULL, 
    quienDaLike VARCHAR(20) NOT NULL,
    PRIMARY KEY (nombreDeCuenta, idComentario, quienDaLike),
    FOREIGN KEY (nombreDeCuenta,idComentario) REFERENCES Comentarios(nombreDeCuenta,id),
    FOREIGN KEY (quienDaLike ) REFERENCES Usuarios(nombreDeCuenta)
);